NLXcensus.1$Consv_odds <- X
# getting the probability for each group
NLXcensus.1 <- NLXcensus.1 %>% mutate(prob_Consv_NL = est_p(Consv_odds))
## post-stratification for the Newfoundland and LabradorX_Consv
## sum of N                             --- add this in the model---
N <- sum(NLXcensus.1$n)
# prediction for ConsxNewfoundland and Labrador
Cons_Vote_percen_NL <- NLXcensus.1 %>% summarise(Consv_est_NL = (sum(n*prob_Consv_NL)/N))
Cons_Vote_percen_NL
# getting the NDP survey data to make the models
NDP_predic.1 <- survey_data.2 %>%
mutate(NDP_pref = case_when(survey_data.2$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.2$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
# group the survey data by the province filter out Newfoundland and Labrador people       --Filtering out the NDP survey data for the province to make model
NLXsurveyXNDP <- NDP_predic.1[NDP_predic.1$province == "Newfoundland and Labrador",]
# make the model for predicting the results on Newfoundland and Labrador,
glm_NDP_model.NL<-glmer(NDP_pref ~ sex + education + (1|income_family) + age_group, data=NLXsurveyXNDP, family=binomial)
#results
#summary(glm_NDP_model.NL)
## assign bins and get the counts for the census data
# filter out for Newfoundland and Labrador in the census data
NLXcensus <- census_data.5[census_data.5$province =="Newfoundland and Labrador",]
## removing the bin of people less than 18 because not in the survey bin
NLXcensus <- NLXcensus[NLXcensus$age_group != "18 to 24 years",]
# get the bin count corresponding to the model we make
NLXcensus.1 <- NLXcensus %>%
count(sex, education,  income_family, age_group)
# make the log odds for the regression model
X <- predict(glm_NDP_model.NL, NLXcensus.1)
#view(X)
# appending the log odds to the  NDPxNewfoundland and Labrador
NLXcensus.1$NDP_odds <- X
# getting the probability for each group
NLXcensus.1 <- NLXcensus.1 %>% mutate(prob_NDP_NL = est_p(NDP_odds))
## post-stratification for the Newfoundland and LabradorX_NDP
## sum of N                             --- add this in the model---
N <- sum(NLXcensus.1$n)
# prediction for NDPxNewfoundland and Labrador
NDP_Vote_percen_NL <- NLXcensus.1 %>% summarise(NDP_est_NL = (sum(n*prob_NDP_NL)/N))
NDP_Vote_percen_NL
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits)" ~ 0))
# filter out based on Newfoundland and Labrador
# group the survey data by the province filter out Newfoundland and Labrador people       --Filtering out the Liberal survey data for the province to make model
NLXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "Newfoundland and Labrador",]
# make the model for predicting the results on Newfoundland and Labrador,
glm_Lib_model_NL <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=NLXsurveyXLib, family=binomial)
#summary(glm_Lib_model_NL)
## now assign bins and make the predictions
# filter out for Newfoundland and Labrador in the census data
NLXcensus <- census_data.5[census_data.5$province == "Newfoundland and Labrador",]    #### Can remove this line##
## removing the bin of people less than 18 because not in the survey bin
NLXcensus <- NLXcensus[NLXcensus$age_group != "18 to 24 years",]
# get the bin count corresponding to the model we make
NLXcensus.1 <- NLXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_NL, NLXcensus.1)
#view(X)
# appending the log odds to the  LiberalxNewfoundland and Labrador
NLXcensus.1$Lib_odds <- X
# getting the probability for each group
NLXcensus.1 <- NLXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the Newfoundland and LabradorX_Consv
## sum of N                             --- add this in the model---
N <- sum(NsXcensus.1$n)
# prediction for NDPxNewfoundland and Labrador
Lib_Vote_percen_NL <- NLXcensus.1 %>% summarise(Lib_est_NL = (sum(n*prob_Lib)/N))
Lib_Vote_percen_NL
prince_edward_island<- census_data.5 %>% group_by(province = "Prince Edward Island")
prince_edward_island<- survey_data.2 %>% group_by(province = "Prince Edward Island")
table(prince_edward_island$political_pref)
##Liberal
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits)" ~ 0))
# filter out based on Prince Edward Island
# group the survey data by the province filter out Prince Edward Island people       --Filtering out the Liberal survey data for the province to make model
NsXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "Prince Edward Island",]
# make the model for predicting the results on Prince Edward Island,
glm_Lib_model_Ns <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=NsXsurveyXLib, family=binomial)
#summary(glm_Lib_model_Ns)
## now assign bins and make the predictions
# filter out for Prince Edward Island in the census data
NsXcensus <- census_data.5[census_data.5$province == "Prince Edward Island",]    #### Can remove this line##
# get the bin count corresponding to the model we make
NsXcensus.1 <- NsXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_Ns, NsXcensus.1)
#view(X)
# appending the log odds to the  LiberalxPrince Edward Island
NsXcensus.1$Lib_odds <- X
# getting the probability for each group
NsXcensus.1 <- NsXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the Prince Edward IslandXLiberal
## sum of N                             --- add this in the model---
N <- sum(NsXcensus.1$n)
# prediction for LiberalxPrince Edward Island
Lib_Vote_percen_Ns <- NsXcensus.1 %>% summarise(Lib_est_Ns = (sum(n*prob_Lib)/N))
Lib_Vote_percen_Ns
##Liberal
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits)" ~ 0))
# filter out based on Prince Edward Island
# group the survey data by the province filter out Prince Edward Island people       --Filtering out the Liberal survey data for the province to make model
NsXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "Prince Edward Island",]
# make the model for predicting the results on Prince Edward Island,
glm_Lib_model_Ns <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=NsXsurveyXLib, family=binomial)
#summary(glm_Lib_model_Ns)
## now assign bins and make the predictions
# filter out for Prince Edward Island in the census data
NsXcensus <- census_data.5[census_data.5$province == "Prince Edward Island",]    #### Can remove this line##
# get the bin count corresponding to the model we make
NsXcensus.1 <- NsXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_Ns, NsXcensus.1)
#view(X)
# appending the log odds to the  LiberalxPrince Edward Island
NsXcensus.1$Lib_odds <- X
# getting the probability for each group
NsXcensus.1 <- NsXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the Prince Edward IslandXLiberal
## sum of N                             --- add this in the model---
N <- sum(NsXcensus.1$n)
# prediction for LiberalxPrince Edward Island
Lib_Vote_percen_Ns <- NsXcensus.1 %>% summarise(Lib_est_PE = (sum(n*prob_Lib)/N))
Lib_Vote_percen_Ns
##Liberal
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits)" ~ 0))
# filter out based on Prince Edward Island
# group the survey data by the province filter out Prince Edward Island people       --Filtering out the Liberal survey data for the province to make model
NsXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "Prince Edward Island",]
# make the model for predicting the results on Prince Edward Island,
glm_Lib_model_Ns <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=NsXsurveyXLib, family=binomial)
#summary(glm_Lib_model_Ns)
## now assign bins and make the predictions
# filter out for Prince Edward Island in the census data
NsXcensus <- census_data.5[census_data.5$province == "Prince Edward Island",]    #### Can remove this line##
# get the bin count corresponding to the model we make
NsXcensus.1 <- NsXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_Ns, NsXcensus.1)
#view(X)
# appending the log odds to the  LiberalxPrince Edward Island
NsXcensus.1$Lib_odds <- X
# getting the probability for each group
NsXcensus.1 <- NsXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the Prince Edward IslandXLiberal
## sum of N                             --- add this in the model---
N <- sum(NsXcensus.1$n)
# prediction for LiberalxPrince Edward Island
Lib_Vote_percen_Ns <- NsXcensus.1 %>% summarise(Lib_est_PE = (sum(n*prob_Lib)/N))
Lib_Vote_percen_Ns
##Conservative
# getting the Conservative survey data to make the models
Conservatives_predic.1 <- survey_data.2 %>%
mutate(Consv_pref = case_when(survey_data.2$political_pref == "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 1,
survey_data.2$political_pref != "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 0))
# filter out based on Prince Edward Island
# group the survey data by the province filter out Prince Edward Island people       --Filtering out the Conservative survey data for the province to make model
NsXsurveyXConsv <- Conservatives_predic.1[Conservatives_predic.1$province == "Prince Edward Island",]
# make the model for predicting the results on Prince Edward Island,
glm_Consv_model_Ns<-glmer(Consv_pref ~ sex + education + (1|income_family) + age_group, data=NsXsurveyXConsv, family=binomial)
#results
#summary(glm_Consv_model_Ns)
## now assign bins and make the predictions
# filter out for Prince Edward Island in the census data
NsXcensus <- census_data.5[census_data.5$province == "Prince Edward Island",]    #### Can remove this line##
# get the bin count corresponding to the model we make
NsXcensus.1 <- NsXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Consv_model_Ns, NsXcensus.1)
#view(X)
# appending the log odds to the  ConservativexPrince Edward Island
NsXcensus.1$Consv_odds <- X
# getting the probability for each group
NsXcensus.1 <- NsXcensus.1 %>% mutate(prob_Consv_Sa = est_p(Consv_odds))
## post-stratification for the Prince Edward IslandX_Consv
## sum of N                             --- add this in the model---
N <- sum(SaXcensus.1$n)
# prediction for ConservativexPrince Edward Island
Consv_Vote_percen_Ns <- NsXcensus.1 %>% summarise(Consv_est_Ns = (sum(n*prob_Consv_Sa)/N))
Consv_Vote_percen_Ns
##NDP
# getting the NDP survey data to make the models
NDP_predic.1 <- survey_data.2 %>%
mutate(NDP_pref = case_when(survey_data.2$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.2$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
# group the survey data by the province filter out Prince Edward Island people       --Filtering out the NDP survey data for the province to make model
NsXsurveyXNDP <- NDP_predic.1[NDP_predic.1$province == "Prince Edward Island",]
# make the model for predicting the results on Prince Edward Island,
glm_NDP_model.Ns<-glmer(NDP_pref ~ sex + education + (1|income_family) + age_group, data=NsXsurveyXNDP, family=binomial)
#results
#summary(glm_NDP_model.Ns)
## assign bins and get the counts for the census data
# filter out for Prince Edward Island in the census data
NsXcensus <- census_data.5[census_data.5$province =="Prince Edward Island",]
# get the bin count corresponding to the model we make
NsXcensus.1 <- NsXcensus %>%
count(sex, education,  income_family, age_group)
# make the log odds for the regression model
X <- predict(glm_NDP_model.Ns, NsXcensus.1)
#view(X)
# appending the log odds to the  NDPxPrince Edward Island
NsXcensus.1$NDP_odds <- X
# getting the probability for each group
NsXcensus.1 <- NsXcensus.1 %>% mutate(prob_NDP_Ns = est_p(NDP_odds))
## post-stratification for the Prince Edward IslandX_NDP
## sum of N                             --- add this in the model---
N <- sum(NsXcensus.1$n)
# prediction for NDPxPrince Edward Island
NDP_Vote_percen_Ns <- NsXcensus.1 %>% summarise(NDP_est_Ns = (sum(n*prob_NDP_Ns)/N))
NDP_Vote_percen_Ns
##Conservative
# getting the Conservative survey data to make the models
Conservatives_predic.1 <- survey_data.2 %>%
mutate(Consv_pref = case_when(survey_data.2$political_pref == "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 1,
survey_data.2$political_pref != "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 0))
# filter out based on Prince Edward Island
# group the survey data by the province filter out Prince Edward Island people       --Filtering out the Conservative survey data for the province to make model
NsXsurveyXConsv <- Conservatives_predic.1[Conservatives_predic.1$province == "Prince Edward Island",]
# make the model for predicting the results on Prince Edward Island,
glm_Consv_model_Ns<-glmer(Consv_pref ~ sex + education + (1|income_family) + age_group, data=NsXsurveyXConsv, family=binomial)
#results
#summary(glm_Consv_model_Ns)
## now assign bins and make the predictions
# filter out for Prince Edward Island in the census data
NsXcensus <- census_data.5[census_data.5$province == "Prince Edward Island",]    #### Can remove this line##
# get the bin count corresponding to the model we make
NsXcensus.1 <- NsXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Consv_model_Ns, NsXcensus.1)
#view(X)
# appending the log odds to the  ConservativexPrince Edward Island
NsXcensus.1$Consv_odds <- X
# getting the probability for each group
NsXcensus.1 <- NsXcensus.1 %>% mutate(prob_Consv_Sa = est_p(Consv_odds))
## post-stratification for the Prince Edward IslandX_Consv
## sum of N                             --- add this in the model---
N <- sum(SaXcensus.1$n)
# prediction for ConservativexPrince Edward Island
Consv_Vote_percen_Ns <- NsXcensus.1 %>% summarise(Consv_est_PE = (sum(n*prob_Consv_Sa)/N))
Consv_Vote_percen_Ns
##Liberal
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits)" ~ 0))
# filter out based on Prince Edward Island
# group the survey data by the province filter out Prince Edward Island people       --Filtering out the Liberal survey data for the province to make model
NsXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "Prince Edward Island",]
# make the model for predicting the results on Prince Edward Island,
glm_Lib_model_Ns <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=NsXsurveyXLib, family=binomial)
#summary(glm_Lib_model_Ns)
## now assign bins and make the predictions
# filter out for Prince Edward Island in the census data
NsXcensus <- census_data.5[census_data.5$province == "Prince Edward Island",]    #### Can remove this line##
# get the bin count corresponding to the model we make
NsXcensus.1 <- NsXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_Ns, NsXcensus.1)
#view(X)
# appending the log odds to the  LiberalxPrince Edward Island
NsXcensus.1$Lib_odds <- X
# getting the probability for each group
NsXcensus.1 <- NsXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the Prince Edward IslandXLiberal
## sum of N                             --- add this in the model---
N <- sum(NsXcensus.1$n)
# prediction for LiberalxPrince Edward Island
Lib_Vote_percen_Ns <- NsXcensus.1 %>% summarise(Lib_est_PE = (sum(n*prob_Lib)/N))
Lib_Vote_percen_Ns
##NDP
# getting the NDP survey data to make the models
NDP_predic.1 <- survey_data.2 %>%
mutate(NDP_pref = case_when(survey_data.2$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.2$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
# group the survey data by the province filter out Prince Edward Island people       --Filtering out the NDP survey data for the province to make model
NsXsurveyXNDP <- NDP_predic.1[NDP_predic.1$province == "Prince Edward Island",]
# make the model for predicting the results on Prince Edward Island,
glm_NDP_model.Ns<-glmer(NDP_pref ~ sex + education + (1|income_family) + age_group, data=NsXsurveyXNDP, family=binomial)
#results
#summary(glm_NDP_model.Ns)
## assign bins and get the counts for the census data
# filter out for Prince Edward Island in the census data
NsXcensus <- census_data.5[census_data.5$province =="Prince Edward Island",]
# get the bin count corresponding to the model we make
NsXcensus.1 <- NsXcensus %>%
count(sex, education,  income_family, age_group)
# make the log odds for the regression model
X <- predict(glm_NDP_model.Ns, NsXcensus.1)
#view(X)
# appending the log odds to the  NDPxPrince Edward Island
NsXcensus.1$NDP_odds <- X
# getting the probability for each group
NsXcensus.1 <- NsXcensus.1 %>% mutate(prob_NDP_Ns = est_p(NDP_odds))
## post-stratification for the Prince Edward IslandX_NDP
## sum of N                             --- add this in the model---
N <- sum(NsXcensus.1$n)
# prediction for NDPxPrince Edward Island
NDP_Vote_percen_Ns <- NsXcensus.1 %>% summarise(NDP_est_PE = (sum(n*prob_NDP_Ns)/N))
NDP_Vote_percen_Ns
##NDPxManitoba
# getting the NDP survey data to make the models
NDP_predic.1 <- survey_data.2 %>%
mutate(NDP_pref = case_when(survey_data.2$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.2$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
# group the survey data by the province filter out Manitoba people       --Filtering out the NDP survey data for the province to make model
MnXsurveyXNDP <- NDP_predic.1[NDP_predic.1$province == "Manitoba",]
# make the model for predicting the results on Manitoba,
glm_NDP_model.Mn<-glmer(NDP_pref ~ sex + education + (1|income_family) + age_group, data=MnXsurveyXNDP, family=binomial)
#results
#summary(glm_NDP_model.Mn)
## assign bins and get the counts for the census data
# filter out for Manitoba in the census data
MnXcensus <- census_data.5[census_data.5$province =="Manitoba",]
# get the bin count corresponding to the model we make
MnXcensus.1 <- MnXcensus %>%
count(sex, education,  income_family, age_group)
# make the log odds for the regression model
X <- predict(glm_NDP_model.Mn, MnXcensus.1)
#view(X)
# appending the log odds to the  NDPxManitoba
MnXcensus.1$NDP_odds <- X
# getting the probability for each group
MnXcensus.1 <- MnXcensus.1 %>% mutate(prob_NDP_Manitoba = est_p(NDP_odds))
## post-stratification for the ManitobaX_NDP
## sum of N                             --- add this in the model---
N <- sum(MnXcensus.1$n)
# prediction for NDPxManitoba
NDP_Vote_percen_Manitoba <- MnXcensus.1 %>% summarise(NDP_est_Manitoba = (sum(n*prob_NDP_Manitoba)/N))
NDP_Vote_percen_Manitoba
##Conservatives x Manitoba
# getting the Conservative survey data to make the models
Conservatives_predic.1 <- survey_data.2 %>%
mutate(Consv_pref = case_when(survey_data.2$political_pref == "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 1,
survey_data.2$political_pref != "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 0))
# filter out based on Manitoba
# group the survey data by the province filter out Manitoba people       --Filtering out the NDP survey data for the province to make model
MnXsurveyXConsv <- Conservatives_predic.1[Conservatives_predic.1$province == "Manitoba",]
# make the model for predicting the results on Manitoba,
glm_Consv_model_Mn<-glmer(Consv_pref ~ sex + education + (1|income_family) + age_group, data=MnXsurveyXConsv, family=binomial)
#results
#summary(glm_Consv_model_Mn)
## now assign bins and make the predictions
# filter out for Ontario in the census data
MnXcensus <- census_data.5[census_data.5$province == "Manitoba",]    #### Can remove this line##
# get the bin count corresponding to the model we make
MnXcensus.1 <- MnXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Consv_model_Bc, MnXcensus.1)
#view(X)
# appending the log odds to the  ConsxManitoba
MnXcensus.1$Consv_odds <- X
# getting the probability for each group
MnXcensus.1 <- MnXcensus.1 %>% mutate(prob_Consv_Mn = est_p(Consv_odds))
## post-stratification for the ManitobaX_Consv
## sum of N                             --- add this in the model---
N <- sum(MnXcensus.1$n)
# prediction for ConsXManitoba
Cons_Vote_percen_Mn <- MnXcensus.1 %>% summarise(Consv_est_Mn = (sum(n*prob_Consv_Mn)/N))
Cons_Vote_percen_Mn
##Liberal X Manitoba
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits))" ~ 0))
# filter out based on Manitoba
# group the survey data by the province filter out Manitoba people       --Filtering out the Liberal survey data for the province to make model
MnXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "Manitoba",]
# make the model for predicting the results on Manitoba,
glm_Lib_model_Mn <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=MnXsurveyXLib, family=binomial)
#summary(glm_Lib_model_Mn)
## now assign bins and make the predictions
# filter out for Manitoba in the census data
MnXcensus <- census_data.5[census_data.5$province == "Manitoba",]    #### Can remove this line##
# get the bin count corresponding to the model we make
MnXcensus.1 <- MnXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_Mn, MnXcensus.1)
#view(X)
# appending the log odds to the  LiberalxManitoba
MnXcensus.1$Lib_odds <- X
# getting the probability for each group
MnXcensus.1 <- MnXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the ManitobaX_Lib
## sum of N                             --- add this in the model---
N <- sum(MnXcensus.1$n)
# prediction for LibxManitoba
Lib_Vote_percen_Mn <- MnXcensus.1 %>% summarise(Lib_est_Mn = (sum(n*prob_Lib)/N))
Lib_Vote_percen_Mn
##New BrunswickXLiberal
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits))" ~ 0))
# filter out based on New Brunswick
# group the survey data by the province filter out New Brunswick people       --Filtering out the Liberal survey data for the province to make model
NbXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "New Brunswick",]
# make the model for predicting the results on New Brunswick,
glm_Lib_model_Nb <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=NbXsurveyXLib, family=binomial)
#summary(glm_Lib_model_Nb)
## now assign bins and make the predictions
# filter out for New Brunswick in the census data
NbXcensus <- census_data.5[census_data.5$province == "New Brunswick",]    #### Can remove this line##
## removing the bin of people less than 18 because not in the survey bin
NbXcensus <- NbXcensus[NbXcensus$age_group != "18 to 24 years",]
# get the bin count corresponding to the model we make
NbXcensus.1 <- NbXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_Nb, NbXcensus.1)
#view(X)
# appending the log odds to the  LiberalXNb
NbXcensus.1$Lib_odds <- X
# getting the probability for each group
NbXcensus.1 <- NbXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the New Brunswick_X_Liberal
## sum of N                             --- add this in the model---
N <- sum(NbXcensus.1$n)
# prediction for LiberalxNb
Lib_Vote_percen_Nb <- NbXcensus.1 %>% summarise(Lib_est_Nb = (sum(n*prob_Lib)/N))
Lib_Vote_percen_Nb
##New BrunswickXConservative
# getting the Conservative survey data to make the models
Conservatives_predic.1 <- survey_data.2 %>%
mutate(Consv_pref = case_when(survey_data.2$political_pref == "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 1,
survey_data.2$political_pref != "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 0))
# filter out based on New Brunswick
# group the survey data by the province filter out New Brunswick people       --Filtering out the Conservative survey data for the province to make model
NbXsurveyXConsv <- Conservatives_predic.1[Conservatives_predic.1$province == "New Brunswick",]
# make the model for predicting the results on New Brunswick,
glm_Consv_model_Nb<-glmer(Consv_pref ~ sex + education + (1|income_family) + age_group, data=NbXsurveyXConsv, family=binomial)
#results
#summary(glm_Consv_model_Nb)
## now assign bins and make the predictions
# filter out for Nb in the census data
NbXcensus <- census_data.5[census_data.5$province == "New Brunswick",]    #### Can remove this line##
# get the bin count corresponding to the model we make
## removing the bin of people less than 18 because not in the survey bin
NbXcensus <- NbXcensus[NbXcensus$age_group != "18 to 24 years",]
NbXcensus.1 <- NbXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Consv_model_Nb, NbXcensus.1)
#view(X)
# appending the log odds
NbXcensus.1$Consv_odds <- X
# getting the probability for each group
NbXcensus.1 <- NbXcensus.1 %>% mutate(prob_Consv_Nb = est_p(Consv_odds))
## post-stratification for the New BrunswickX_Consv
## sum of N                             --- add this in the model---
N <- sum(NbXcensus.1$n)
# prediction for ConsxNew Brunswick
Cons_Vote_percen_Nb <- NbXcensus.1 %>% summarise(Consv_est_Nb = (sum(n*prob_Consv_Nb)/N))
Cons_Vote_percen_Nb
##New BrunswickXGreen
# getting the Conservative survey data to make the models
Green_predic.1 <- survey_data.2 %>%
mutate(Green_pref = case_when(survey_data.2$political_pref == "Green Party (Greens)" ~ 1,
survey_data.2$political_pref != "Green Party (Greens)" ~ 0))
# filter out based on New Brunswick
# group the survey data by the province filter out New Brunswick people       --Filtering out the Green survey data for the province to make model
NbXsurveyXGreen <- Green_predic.1[Green_predic.1$province == "New Brunswick",]
# make the model for predicting the results on New Brunswick,
glm_Green_model_Nb<-glmer(Green_pref ~ sex + education + (1|income_family) + age_group, data=NbXsurveyXGreen, family=binomial)
#results
#summary(glm_Green_model_Nb)
## now assign bins and make the predictions
# filter out for New Brunswick in the census data
NbXcensus <- census_data.5[census_data.5$province == "New Brunswick",]    #### Can remove this line##
# get the bin count corresponding to the model we make
## removing the bin of people less than 18 because not in the survey bin
NbXcensus <- NbXcensus[NbXcensus$age_group != "18 to 24 years",]
NbXcensus.1 <- NbXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Green_model_Nb, NbXcensus.1)
#view(X)
# appending the log odds
NbXcensus.1$Green_odds <- X
# getting the probability for each group
NbXcensus.1 <- NbXcensus.1 %>% mutate(prob_Green_Nb = est_p(Green_odds))
## post-stratification for the New BrunswickXGreens
## sum of N                             --- add this in the model---
N <- sum(NbXcensus.1$n)
# prediction for GreensxNew Brunswick
Green_Vote_percen_Nb <- NbXcensus.1 %>% summarise(Green_est_Nb = (sum(n*prob_Green_Nb)/N))
Green_Vote_percen_Nb
