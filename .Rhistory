csp_105,
csp_110a,
csp_110b,
csp_110c,
csp_110d,
csp_160,
fi_110) %>%
mutate_at(vars(agedc:fi_110), .funs = funs(ifelse(.>=96, NA, .))) %>%
mutate_at(.vars = vars(sex:fi_110),
.funs = funs(eval(parse(text = cw_statements %>%
filter(variable_name==deparse(substitute(.))) %>%
select(cw_statement) %>%
pull()))))
# Fix the names
gss <- gss %>%
clean_names() %>%
rename(age = agedc,
age_first_child = achd_1c,
age_youngest_child_under_6 = achdmpl,
total_children = totchdc,
age_start_relationship = acu0c,
age_at_first_marriage = agema1c,
age_at_first_birth = achb1c,
distance_between_houses = rsh_131a,
age_youngest_child_returned_work = arretwk,
feelings_life = slm_01,
sex = sex,
place_birth_canada = brthcan,
place_birth_father = brthfcan,
place_birth_mother = brthmcan,
place_birth_macro_region = brthmacr,
place_birth_province = brthprvc,
year_arrived_canada = yrarri,
province = prv,
region = region,
pop_center = luc_rst,
marital_status = marstat,
aboriginal = amb_01,
vis_minority = vismin,
age_immigration = alndimmg,
landed_immigrant = bpr_16,
citizenship_status = bpr_19,
education = ehg3_01b,
own_rent = odr_10,
living_arrangement = livarr12,
hh_type = dwelc,
hh_size = hsdsizec,
partner_birth_country = brthpcan,
partner_birth_province = brtpprvc,
partner_vis_minority = visminpr,
partner_sex = rsh_125a,
partner_education = eop_200,
average_hours_worked = uhw_16gr,
worked_last_week = lmam_01,
partner_main_activity = acmpryr,
self_rated_health = srh_110,
self_rated_mental_health = srh_115,
religion_has_affiliation = religflg,
regilion_importance = rlr_110,
language_home = lanhome,
language_knowledge = lan_01,
income_family = famincg2,
income_respondent = ttlincg2,
occupation = noc1610,
childcare_regular = cc_20_1,
childcare_type = cc_30_1,
childcare_monthly_cost = ccmoc1c,
ever_fathered_child = cor_031,
ever_given_birth = cor_041,
number_of_current_union = cu0rnkc,
lives_with_partner = pr_cl,
children_in_household = chh0014c,
number_total_children_intention = nochricc,
has_grandchildren = grndpa,
grandparents_still_living = gparliv,
ever_married = evermar,
current_marriage_is_first = ma0_220,
number_marriages = nmarevrc,
religion_participation = ree_02,
partner_location_residence = rsh_131b,
full_part_time_work = rto_101,
time_off_work_birth = rto_110,
reason_no_time_off_birth = rto_120,
returned_same_job = rtw_300,
satisfied_time_children = sts_410,
provide_or_receive_fin_supp = csp_105,
fin_supp_child_supp = csp_110a,
fin_supp_child_exp = csp_110b,
fin_supp_lump = csp_110c,
fin_supp_other = csp_110d,
fin_supp_agreement = csp_160,
future_children_intention = fi_110)
#### Clean up ####
gss <- gss %>%
mutate_at(vars(age:future_children_intention),
.funs = funs(ifelse(.=="Valid skip"|.=="Refusal"|.=="Not stated", "NA", .)))
gss <- gss %>%
mutate(is_male = ifelse(sex=="Male", 1, 0))
gss <- gss %>%
mutate_at(vars(fin_supp_child_supp:fin_supp_other), .funs = funs(case_when(
.=="Yes"~1,
.=="No"~0,
.=="NA"~as.numeric(NA)
)))
main_act <- raw_data %>%
mutate(main_activity = case_when(
mpl_105a=="Yes"~ "Working at a paid job/business",
mpl_105b=="Yes" ~ "Looking for paid work",
mpl_105c=="Yes" ~ "Going to school",
mpl_105d=="Yes" ~ "Caring for children",
mpl_105e=="Yes" ~ "Household work",
mpl_105i=="Yes" ~ "Other",
TRUE~ "NA")) %>%
select(main_activity) %>%
pull()
age_diff <- raw_data %>%
select(marstat, aprcu0c, adfgrma0) %>%
mutate_at(.vars = vars(aprcu0c:adfgrma0),
.funs = funs(eval(parse(text = cw_statements %>%
filter(variable_name==deparse(substitute(.))) %>%
select(cw_statement) %>%
pull())))) %>%
mutate(age_diff = ifelse(marstat=="Living common-law", aprcu0c, adfgrma0)) %>%
mutate_at(vars(age_diff), .funs = funs(ifelse(.=="Valid skip"|.=="Refusal"|.=="Not stated", "NA", .))) %>%
select(age_diff) %>%
pull()
gss <- gss %>% mutate(main_activity = main_act, age_diff = age_diff)
# Change some from strings into numbers
gss <- gss %>%
rowwise() %>%
mutate(hh_size = str_remove(string = hh_size, pattern = "\\ .*")) %>%
mutate(hh_size = case_when(
hh_size=="One" ~ 1,
hh_size=="Two" ~ 2,
hh_size=="Three" ~ 3,
hh_size=="Four" ~ 4,
hh_size=="Five" ~ 5,
hh_size=="Six" ~ 6
))
gss <- gss %>%
rowwise() %>%
mutate(number_marriages = str_remove(string = number_marriages, pattern = "\\ .*")) %>%
mutate(number_marriages = case_when(
number_marriages=="No" ~ 0,
number_marriages=="One" ~ 1,
number_marriages=="Two" ~ 2,
number_marriages=="Three" ~ 3,
number_marriages=="Four" ~ 4
))
gss <- gss %>%
rowwise() %>%
mutate(number_total_children_known = ifelse(number_total_children_intention=="Don't know"|number_total_children_intention=="NA", 0, 1)) %>%
mutate(number_total_children_intention = str_remove(string = number_total_children_intention, pattern = "\\ .*")) %>%
mutate(number_total_children_intention = case_when(
number_total_children_intention=="None" ~ 0,
number_total_children_intention=="One" ~ 1,
number_total_children_intention=="Two" ~ 2,
number_total_children_intention=="Three" ~ 3,
number_total_children_intention=="Four" ~ 4,
number_total_children_intention=="Don't" ~ as.numeric(NA)
))
write_csv(gss, "gss_clean.csv")
install.packages("brms")
install.packages("brms")
install.packages("rstan")
library(brms)
library(tidyverse)
library(tidyverse)
library(brms)
library(tidyverse)
blockXspeed <- tibble(blocks = c(3,4,5,6,7,10),
time = c(1,2,3,5,8,9))
blockXspeed <- tibble(blocks = c(3,4,5,6,7,10),
time = c(1,2,3,5,8,9))
ggplot(blockXspeed, aes(x=blocks, y=time )) + geom_point()
# will be using the brm() for Baysian Regression
# we declare our model equation uder formula, in the brm(formula = ?~?, data = ?, seed = ?)
# Setup of the model is similar to the normal regression y ~ xi + (xj)^2 + ....
model <- brm(formula = time~blocks, data = blockXspeed, seed=69)
# use the standanrd summary to look at the regression results
summary(model)
# make the data frame
poll <- tibble(
phd = sample(x = c("yes", "no", "maybe"), prob = c(0.25,0.45,0.3), replace = T, size = 100),
views = sample(x = c("liberal", "democrat"), replace = T, size = 100)
)
# setup the model
model.2 <- brm(formula = views ~ phd, data = poll,family = bernoulli(), seed = 69)
# the classic summary
summary(model.2)
mcmc_plot(model.2)
# Verify what this shows, interpratation of it
mcmc_plot(model.2, type = "hist")
# we want to make sure our model is converging, to do this we need to check using this plot
mcmc_plot(model.2, type = "trace")
library(broom)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(broom)
library(tidyverse)
library(broom)
library(tidyverse)
library(broom)
library(tidyverse)
library(tidyverse)
library(broom)
library(tidyverse)
library(broom)
library(tidyverse)
library(broom)
library(tidyverse)
### Step 1: Loading in the Poll data
example_poll <- read_csv("outputs/data/example_poll.csv")
### Step 1: Loading in the Poll data
example_poll <- read_csv("/Users/ujji7/Downloads/Archive/outputs/data/example_poll.csv")
head(example_poll)
example_poll %>%
summarise(raw_ALP_prop = sum(supports_ALP) / nrow(example_poll))
### Step 2: "Modelling" the Poll data
model <- lm(supports_ALP ~ gender + age_group,
data = example_poll)
### Step 2: "Modelling" the Poll data
model <- lm(supports_ALP ~ gender + age_group,
data = example_poll)
broom::tidy(model)
### Step 4: Apply the model to the poststratification data
# Here we are making predictions using our model
# with some new data from the census, and we saving
# the results of those predictions by adding a new
# column to the census_data dataset called 'estimate'.
census_data$estimate <-
model %>%
predict(newdata = census_data)
census_data %>%
mutate(alp_predict_prop = estimate*cell_prop_of_division_total) %>%
group_by(state) %>%
summarise(alp_predict = sum(alp_predict_prop))
head(census_data)
### Step 3: Loading in the census data
census_data <- read_csv("/Users/ujji7/Downloads/Archive/outputs/data/census_data.csv")
head(census_data)
### Step 4: Apply the model to the poststratification data
# Here we are making predictions using our model
# with some new data from the census, and we saving
# the results of those predictions by adding a new
# column to the census_data dataset called 'estimate'.
census_data$estimate <-
model %>%
predict(newdata = census_data)
census_data %>%
mutate(alp_predict_prop = estimate*cell_prop_of_division_total) %>%
group_by(state) %>%
summarise(alp_predict = sum(alp_predict_prop))
### Step 4: Apply the model to the poststratification data
# Here we are making predictions using our model
# with some new data from the census, and we saving
# the results of those predictions by adding a new
# column to the census_data dataset called 'estimate'.
census_data$estimate <-
model %>%
predict(newdata = census_data)
head(census_data)
census_data %>%
mutate(alp_predict_prop = estimate*cell_prop_of_division_total) %>%
group_by(state) %>%
summarise(alp_predict = sum(alp_predict_prop))
# Here we are just loading the data files
census_data <- read_csv("gss_clean.csv")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#library(openintro)
library(tidyverse)
library(broom)
library(ggpubr)
# Here we are just loading the data files
census_data <- read_csv("gss_clean.csv")
# Here you can load in the survey data
survey_data <- read_csv("ces2019_clean.csv")
View(census_data)
View(survey_data)
library(tidyverse)
library(janitor)
# In this code you can load in and clean the survey data
# First, if you don't already have it, install the devtools package:
# install.packages("devtools")
# get the dataframe
survey_data <- read_csv("ces2019-phone_clean.csv")
# find the required cols
# q3 -> gender/sex? 1 Male, 2 Female
# q4 -> provience  (1) Newfoundland and Labrador, (2) Prince Edward Island, (3) Nova Scotia, (4) New Brunswick, (5) Quebec, (6) Ontario,
# (7) Manitoba, (8) Saskatchewan, (9) Alberta, (10) British Columbia,
# (11) Northwest Territories, (12) Yukon, (13) Nunavut
# age -> q2(2019 -age)?
# total_children -> NA
# feelings_life -> q6
# pop_center -> NA
#aboriginal -> NA
#vis_minority -> NA
# citizenship_status -> q1 [filter out]
#education -> q61
#living_arrangement -> NA
#average_hours_worked, -> NA
#regilion_importance -> q63
# income_family -> q69
#occupation -> q52
# political_pref -> q11
# choosing the above selected cols
survey_data.1 <- select(survey_data, 25:29,93,140,84,38, 245, 247)#, 96)
# renaming the cols for ease
survey_data.2 <- survey_data.1 %>%
clean_names() %>%
rename(born = q2,
feelings_life = q6,
citizenship_status = q1,
education = q61, #  regilion_importance = q63, -> 96
religion_participation = p54,
income = q69,
occupation = p52,
political_pref = q11,
sex = q3,
province = q4
)
# removing all the NA values form the data set
survey_data.3 <- na.omit(survey_data.2)
# calculating the age of the participants
survey_data.4 <- survey_data.3  %>% mutate(age= 2019-born)
# removing the born col
survey_data.4 <- select(survey_data.4, -2)
## adding the tags to the categorical variables
### EDUCATION
# removing the people who answered Don't know(-9) OR Refused(-8) OR Skipped(-7)
survey_data.5 <- survey_data.4[!grepl(-8, survey_data.4$education), ]
survey_data.5 <- survey_data.5[!grepl(-9, survey_data.5$education), ]
## grouping the categories into lesser categories
# first change the data type from dbl to chr
survey_data.5$education <- as.character(survey_data.5$education)
# Less than high school diploma or its equivalent = (1) No schooling + (2) Some elementary school +
# (3) Completed elementary school +  (4) Some secondary / high school
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "1", "Less than high school diploma or its equivalent")
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "2", "Less than high school diploma or its equivalent")
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "3", "Less than high school diploma or its equivalent")
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "4", "Less than high school diploma or its equivalent")
# High school diploma or a high school equivalency certificate = (5) Completed secondary / high school +
# (6) Some technical, community college, CEGEP, College Classi  [as it was not completed]
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "5", "High school diploma or a high school equivalency certificate")
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "6", "High school diploma or a high school equivalency certificate")
# College, CEGEP, trade certificate or other non-university certificate or di... = (7) Completed technical, community college, CEGEP, College C +
# (6) Some technical, community college, CEGEP, College Classi
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "7", "College, CEGEP, trade certificate or other non-university certificate or di...")
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "6", "College, CEGEP, trade certificate or other non-university certificate or di...")
# University certificate or diploma below the bachelor's level = (8) Some university
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "8", "University certificate or diploma below the bachelor's level")
# Bachelor's degree (e.g. B.A., B.Sc., LL.B.) = (9) Bachelor's degree
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "9", "Bachelor's degree (e.g. B.A., B.Sc., LL.B.)")
# University certificate, diploma or degree above the bach... = (10) Master's degree + (11) Professional degree or doctorate
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "10", "University certificate, diploma or degree above the bach...")
survey_data.5$education <- replace(survey_data.5$education, survey_data.5$education == "11", "University certificate, diploma or degree above the bach...")
## Canadian Citizen
#because everyone is a Canadian citizen hence we dont do anything and can just remove that col
survey_data.5 <- select(survey_data.5, -1)
## Gender/Sex
# removing the people who answered Don't know(-9) OR Refused(-8) OR Skipped(-7) OR Other(3) <- as not in dataset
survey_data.5 <- survey_data.5[!grepl(-7, survey_data.5$sex), ]
survey_data.5 <- survey_data.5[!grepl(-8, survey_data.5$sex), ]
survey_data.5 <- survey_data.5[!grepl(-9, survey_data.5$sex), ]
survey_data.5 <- survey_data.5[!grepl(3, survey_data.5$sex), ]
## first change the data type from dbl to chr, to assign chr values
survey_data.5$sex <- as.character(survey_data.5$sex)
# Assigning 1 Male, 2 Female
survey_data.5$sex <- replace(survey_data.5$sex, survey_data.5$sex == "1", "Male")
survey_data.5$sex <- replace(survey_data.5$sex, survey_data.5$sex == "2", "Female")
## Province
# removing the people who answered Don't know(-9) OR Refused(-8) OR Skipped(-7)
survey_data.5 <- survey_data.5[!grepl(-7, survey_data.5$province), ]
survey_data.5 <- survey_data.5[!grepl(-8, survey_data.5$province), ]
survey_data.5 <- survey_data.5[!grepl(-9, survey_data.5$province), ]
## first change the data type from dbl to chr, to assign chr values
survey_data.5$province <- as.character(survey_data.5$province)
# (1) Newfoundland and Labrador
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "1", "Newfoundland and Labrador")
#(2) Prince Edward Island
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "2", "Prince Edward Island")
#(3) Nova Scotia
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "3", "Nova Scotia")
#(4) New Brunswick
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "4", "New Brunswick")
#(5) Quebec
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "5", "Quebec")
#(6) Ontario
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "6", "Ontario")
#(7) Manitoba
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "7", "Manitoba")
#(8) Saskatchewan
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "8", "Saskatchewan")
#(9) Alberta
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "9", "Alberta")
#(10) British Columbia
survey_data.5$province <- replace(survey_data.5$province, survey_data.5$province == "10", "British Columbia")
## Religion Participation)     ##------New TAB--------##
# removing the people who answered Don't know(-9) OR Refused(-8) OR Skipped(-7)
survey_data.5 <- survey_data.5[!grepl(-7, survey_data.5$religion_participation), ]
survey_data.5 <- survey_data.5[!grepl(-8, survey_data.5$religion_participation), ]
survey_data.5 <- survey_data.5[!grepl(-9, survey_data.5$religion_participation), ]
## first change the data type from dbl to chr, to assign chr values
survey_data.5$religion_participation <- as.character(survey_data.5$religion_participation)
# Not at all = (1) Never
survey_data.5$religion_participation <- replace(survey_data.5$religion_participation, survey_data.5$religion_participation == "1", "Not at all")
# At least once a year = (2) Once a year + (3) Two to eleven times a year
survey_data.5$religion_participation <- replace(survey_data.5$religion_participation, survey_data.5$religion_participation == "2", "At least once a year")
survey_data.5$religion_participation <- replace(survey_data.5$religion_participation, survey_data.5$religion_participation == "3", "At least once a year")
# At least once a month = (4) Once a month + (5) Two or more times a month
survey_data.5$religion_participation <- replace(survey_data.5$religion_participation, survey_data.5$religion_participation == "4", "At least once a month")
survey_data.5$religion_participation <- replace(survey_data.5$religion_participation, survey_data.5$religion_participation == "5", "At least once a month")
# At least once a week = (6) Once a week + (7) More than once a week
survey_data.5$religion_participation <- replace(survey_data.5$religion_participation, survey_data.5$religion_participation == "6", "At least once a week")
survey_data.5$religion_participation <- replace(survey_data.5$religion_participation, survey_data.5$religion_participation == "7", "At least once a week")
## Remove occupation as can't filter out according to the census data
survey_data.6 <- select(survey_data.5, -6, -8)
## Political Preference
# removing the people who answered Don't know(-9) OR Refused(-8) OR Skipped(-7) OR (9) None of these OR (10) Will spoil ballet
survey_data.6 <- survey_data.6[!grepl(-7, survey_data.6$political_pref), ]
survey_data.6 <- survey_data.6[!grepl(-8, survey_data.6$political_pref), ]
survey_data.6 <- survey_data.6[!grepl(-9, survey_data.6$political_pref), ]
survey_data.6 <- survey_data.6[!grepl(9, survey_data.6$political_pref), ]
## first change the data type from dbl to chr, to assign chr values
survey_data.6$political_pref <- as.character(survey_data.6$political_pref)
#(1) Liberal (Grits)
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "1", "Liberal (Grits)")
#(2) Conservatives (Tory, PCs, Conservative Party of Canada)
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "2", "Conservatives (Tory, PCs, Conservative Party of Canada)")
#(3) NDP (New Democratic Party, New Democrats, NDPers)
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "3", "NDP (New Democratic Party, New Democrats, NDPers)")
#(4) Bloc Québécois (BQ, PQ, Bloc, Parti Québéc)
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "4", "Bloc Québécois (BQ, PQ, Bloc, Parti Québécois)")
#(5) Green Party (Greens)
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "5", "Green Party (Greens)")
#(6) People's Party
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "6", "People's Party")
#(7) Other
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "7", "Other")
#(8) Will not vote
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "8", "Will not vote")
#(9) None of these
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "9", "None of these")
#(10) Will spoil ballet
survey_data.6$political_pref <- replace(survey_data.6$political_pref, survey_data.6$political_pref == "10", "Will spoil ballet")
## INCOME Family
# removing the people who answered Don't know(-9) OR Refused(-8) OR Skipped(-7) OR (9) None of these OR (10) Will spoil ballet
survey_data.7 <- survey_data.6[!grepl(-7, survey_data.6$income), ]
survey_data.7 <- survey_data.7[!grepl(-8, survey_data.7$income), ]
survey_data.7 <- survey_data.7[!grepl(-9, survey_data.7$income), ]
# making a new col for income level
survey_data.7 <- survey_data.7 %>%
mutate(income_family = case_when(survey_data.7$income < 25000 ~ "Less than $25,000",
survey_data.7$income <= 49999 ~ "$25,000 to $49,999",
survey_data.7$income <= 74999 ~ "$50,000 to $74,999",
survey_data.7$income <= 99999 ~ "$75,000 to $99,999",
survey_data.7$income <= 124999 ~ "$100,000 to $ 124,999",
124999 <  survey_data.7$income ~ "$125,000 and more"))
#now remove the income col as no longer required
survey_data.7a <- select(survey_data.7, -5)
## Feeling Life
# removing the people who answered Don't know(-9) OR Refused(-8) OR Skipped(-7)
survey_data.8 <- survey_data.7a[!grepl(-7, survey_data.7a$feelings_life), ]
survey_data.8 <- survey_data.8[!grepl(-8, survey_data.8$feelings_life), ]
survey_data.8 <- survey_data.8[!grepl(-9, survey_data.8$feelings_life), ]
## first change the data type from dbl to chr, to assign chr values
survey_data.8 <- survey_data.8 %>%
mutate(feelings_life = case_when(survey_data.8$feelings_life == 1 ~ "Very satisfied",
survey_data.8$feelings_life == 2 ~ "Fairly satisfied",
survey_data.8$feelings_life == 3 ~ "Not very satisfied",
survey_data.8$feelings_life == 4 ~ "Not satisfied at all"))
View(survey_data.8)
write_csv(survey_data.8, "ces2019_clean.csv")
# Here we are just loading the data files
census_data <- read_csv("gss_clean.csv")
# Here you can load in the survey data
survey_data <- read_csv("ces2019_clean.csv")
## make the according data sets according to the Support
NDP_predic <- survey_data %>%
mutate(NDP_pref = case_when( survey_data$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
## Bloc Québécois (BQ, PQ, Bloc, Parti Québécois)
Bloc_predic <- survey_data %>%
mutate(Bloc_pref = case_when(survey_data$political_pref == "Bloc Québécois (BQ, PQ, Bloc, Parti Québécois)" ~ 1,
survey_data$political_pref != "Bloc Québécois (BQ, PQ, Bloc, Parti Québécois)" ~ 0))
## Green Party (Greens)
Green_predic <- survey_data %>%
mutate(Green_pref = case_when(survey_data$political_pref == "Green Party (Greens)" ~ 1,
survey_data$political_pref != "Green Party (Greens)"  ~ 0))
## Conservatives (Tory, PCs, Conservative Party of Canada)
Conservative_predic <- survey_data %>%
mutate(Conservative_pref = case_when(survey_data$political_pref == "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 1,
survey_data$political_pref != "Conservatives (Tory, PCs, Conservative Party of Canada)"  ~ 0))
## Liberal (Grits)
Liberal_predic <- survey_data %>%
mutate(Liberal_pref = case_when(survey_data$political_pref == "Liberal (Grits)" ~ 1,
survey_data$political_pref != "Liberal (Grits)"  ~ 0))
## People's Party
Liberal_predic <- survey_data %>%
mutate(People_pref = case_when(survey_data$political_pref == "People's Party" ~ 1,
survey_data$political_pref != "People's Party"  ~ 0))
## Will spoil ballet
Spoil_pred <- survey_data %>%
mutate(People_pref = case_when(survey_data$political_pref == "Will spoil ballet" ~ 1,
survey_data$political_pref != "Will spoil ballet"  ~ 0))
## Other
Other_pred <- survey_data %>%
mutate(Other_pref = case_when(survey_data$political_pref == "Other" ~ 1,
survey_data$political_pref != "Other"  ~ 0))
View(NDP_predic)
View(NDP_predic)
