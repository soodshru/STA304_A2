MnXcensus.1 <- MnXcensus.1 %>% mutate(prob_NDP_Manitoba = est_p(NDP_odds))
## post-stratification for the ManitobaX_NDP
## sum of N                             --- add this in the model---
N <- sum(MnXcensus.1$n)
# prediction for NDPxManitoba
NDP_Vote_percen_Manitoba <- MnXcensus.1 %>% summarise(NDP_est_Manitoba = (sum(n*prob_NDP_Manitoba)/N))
NDP_Vote_percen_Manitoba
##Conservatives x Manitoba
# getting the Conservative survey data to make the models
Conservatives_predic.1 <- survey_data.2 %>%
mutate(Consv_pref = case_when(survey_data.2$political_pref == "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 1,
survey_data.2$political_pref != "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 0))
# filter out based on Manitoba
# group the survey data by the province filter out Manitoba people       --Filtering out the NDP survey data for the province to make model
MnXsurveyXConsv <- Conservatives_predic.1[Conservatives_predic.1$province == "Manitoba",]
# make the model for predicting the results on Manitoba,
glm_Consv_model_Mn<-glmer(Consv_pref ~ sex + education + (1|income_family) + age_group, data=MnXsurveyXConsv, family=binomial)
#results
#summary(glm_Consv_model_Mn)
## now assign bins and make the predictions
# filter out for Ontario in the census data
MnXcensus <- census_data.5[census_data.5$province == "Manitoba",]    #### Can remove this line##
# get the bin count corresponding to the model we make
MnXcensus.1 <- MnXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Consv_model_Bc, MnXcensus.1)
#view(X)
# appending the log odds to the  ConsxManitoba
MnXcensus.1$Consv_odds <- X
# getting the probability for each group
MnXcensus.1 <- MnXcensus.1 %>% mutate(prob_Consv_Mn = est_p(Consv_odds))
## post-stratification for the ManitobaX_Consv
## sum of N                             --- add this in the model---
N <- sum(MnXcensus.1$n)
# prediction for ConsXManitoba
Cons_Vote_percen_Mn <- MnXcensus.1 %>% summarise(Consv_est_Mn = (sum(n*prob_Consv_Mn)/N))
Cons_Vote_percen_Mn
##Liberal X Manitoba
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits))" ~ 0))
# filter out based on Manitoba
# group the survey data by the province filter out Manitoba people       --Filtering out the Liberal survey data for the province to make model
MnXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "Manitoba",]
# make the model for predicting the results on Manitoba,
glm_Lib_model_Mn <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=MnXsurveyXLib, family=binomial)
#summary(glm_Lib_model_Mn)
## now assign bins and make the predictions
# filter out for Manitoba in the census data
MnXcensus <- census_data.5[census_data.5$province == "Manitoba",]    #### Can remove this line##
# get the bin count corresponding to the model we make
MnXcensus.1 <- MnXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_Mn, MnXcensus.1)
#view(X)
# appending the log odds to the  LiberalxManitoba
MnXcensus.1$Lib_odds <- X
# getting the probability for each group
MnXcensus.1 <- MnXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the ManitobaX_Lib
## sum of N                             --- add this in the model---
N <- sum(MnXcensus.1$n)
# prediction for LibxManitoba
Lib_Vote_percen_Mn <- MnXcensus.1 %>% summarise(Lib_est_Mn = (sum(n*prob_Lib)/N))
Lib_Vote_percen_Mn
##New BrunswickXLiberal
## Making the model and the predictions
# getting the Liberal survey data to make the models
Liberal_predic.1 <- survey_data.2 %>%
mutate(Lib_pref = case_when(survey_data.2$political_pref == "Liberal (Grits)" ~ 1,
survey_data.2$political_pref != "Liberal (Grits))" ~ 0))
# filter out based on New Brunswick
# group the survey data by the province filter out New Brunswick people       --Filtering out the Liberal survey data for the province to make model
NbXsurveyXLib <- Liberal_predic.1[Liberal_predic.1$province == "New Brunswick",]
# make the model for predicting the results on New Brunswick,
glm_Lib_model_Nb <-glmer(Lib_pref ~ sex + education + (1|income_family) + age_group, data=NbXsurveyXLib, family=binomial)
#summary(glm_Lib_model_Nb)
## now assign bins and make the predictions
# filter out for New Brunswick in the census data
NbXcensus <- census_data.5[census_data.5$province == "New Brunswick",]    #### Can remove this line##
## removing the bin of people less than 18 because not in the survey bin
NbXcensus <- NbXcensus[NbXcensus$age_group != "18 to 24 years",]
# get the bin count corresponding to the model we make
NbXcensus.1 <- NbXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Lib_model_Nb, NbXcensus.1)
#view(X)
# appending the log odds to the  LiberalXNb
NbXcensus.1$Lib_odds <- X
# getting the probability for each group
NbXcensus.1 <- NbXcensus.1 %>% mutate(prob_Lib = est_p(Lib_odds))
## post-stratification for the New Brunswick_X_Liberal
## sum of N                             --- add this in the model---
N <- sum(NbXcensus.1$n)
# prediction for LiberalxNb
Lib_Vote_percen_Nb <- NbXcensus.1 %>% summarise(Lib_est_Nb = (sum(n*prob_Lib)/N))
Lib_Vote_percen_Nb
##New BrunswickXConservative
# getting the Conservative survey data to make the models
Conservatives_predic.1 <- survey_data.2 %>%
mutate(Consv_pref = case_when(survey_data.2$political_pref == "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 1,
survey_data.2$political_pref != "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 0))
# filter out based on New Brunswick
# group the survey data by the province filter out New Brunswick people       --Filtering out the Conservative survey data for the province to make model
NbXsurveyXConsv <- Conservatives_predic.1[Conservatives_predic.1$province == "New Brunswick",]
# make the model for predicting the results on New Brunswick,
glm_Consv_model_Nb<-glmer(Consv_pref ~ sex + education + (1|income_family) + age_group, data=NbXsurveyXConsv, family=binomial)
#results
#summary(glm_Consv_model_Nb)
## now assign bins and make the predictions
# filter out for Nb in the census data
NbXcensus <- census_data.5[census_data.5$province == "New Brunswick",]    #### Can remove this line##
# get the bin count corresponding to the model we make
## removing the bin of people less than 18 because not in the survey bin
NbXcensus <- NbXcensus[NbXcensus$age_group != "18 to 24 years",]
NbXcensus.1 <- NbXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Consv_model_Nb, NbXcensus.1)
#view(X)
# appending the log odds
NbXcensus.1$Consv_odds <- X
# getting the probability for each group
NbXcensus.1 <- NbXcensus.1 %>% mutate(prob_Consv_Nb = est_p(Consv_odds))
## post-stratification for the New BrunswickX_Consv
## sum of N                             --- add this in the model---
N <- sum(NbXcensus.1$n)
# prediction for ConsxNew Brunswick
Cons_Vote_percen_Nb <- NbXcensus.1 %>% summarise(Consv_est_Nb = (sum(n*prob_Consv_Nb)/N))
Cons_Vote_percen_Nb
##New BrunswickXGreen
# getting the Conservative survey data to make the models
Green_predic.1 <- survey_data.2 %>%
mutate(Green_pref = case_when(survey_data.2$political_pref == "Green Party (Greens)" ~ 1,
survey_data.2$political_pref != "Green Party (Greens)" ~ 0))
# filter out based on New Brunswick
# group the survey data by the province filter out New Brunswick people       --Filtering out the Green survey data for the province to make model
NbXsurveyXGreen <- Green_predic.1[Green_predic.1$province == "New Brunswick",]
# make the model for predicting the results on New Brunswick,
glm_Green_model_Nb<-glmer(Green_pref ~ sex + education + (1|income_family) + age_group, data=NbXsurveyXGreen, family=binomial)
#results
#summary(glm_Green_model_Nb)
## now assign bins and make the predictions
# filter out for New Brunswick in the census data
NbXcensus <- census_data.5[census_data.5$province == "New Brunswick",]    #### Can remove this line##
# get the bin count corresponding to the model we make
## removing the bin of people less than 18 because not in the survey bin
NbXcensus <- NbXcensus[NbXcensus$age_group != "18 to 24 years",]
NbXcensus.1 <- NbXcensus %>%
count(sex, education,  income_family, age_group)        #### Can remove this line##
# make the log odds for the regression model
X <- predict(glm_Green_model_Nb, NbXcensus.1)
#view(X)
# appending the log odds
NbXcensus.1$Green_odds <- X
# getting the probability for each group
NbXcensus.1 <- NbXcensus.1 %>% mutate(prob_Green_Nb = est_p(Green_odds))
## post-stratification for the New BrunswickXGreens
## sum of N                             --- add this in the model---
N <- sum(NbXcensus.1$n)
# prediction for GreensxNew Brunswick
Green_Vote_percen_Nb <- NbXcensus.1 %>% summarise(Green_est_Nb = (sum(n*prob_Green_Nb)/N))
Green_Vote_percen_Nb
table(survey_data.2$income_family)
level_order <- c('Less than $25,000', '$25,000 to $49,999', '$50,000 to $74,999','$75,000 to $99,999','$100,000 to $ 124,999','$125,000 and more')
mytable.1 <- table(survey_data$sex)
lbls.1 <- paste(names(mytable.1), "\n", mytable.1, sep="")
mytable.2 <- table(census_data$sex)
lbls.2 <- paste(names(mytable.2), "\n", mytable.2, sep="")
level_order <- c('Less than $25,000', '$25,000 to $49,999', '$50,000 to $74,999','$75,000 to $99,999','$100,000 to $ 124,999','$125,000 and more')
ggarrange(
ggplot(survey_data, aes(x=sex ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Survey") + theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")) ,
ggplot(census_data.4, aes(x=sex))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ggplot(survey_data, aes(x=province ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Province in Survey")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold"),axis.text.x = element_text(angle = 90)),
ggplot(census_data.4, aes(x=province))+
geom_bar(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Province in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold"),axis.text.x = element_text(angle = 90)),
ggplot(survey_data, aes(x=age ))+
geom_histogram(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Ages in Survey")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ggplot(census_data.4, aes(x=age))+
geom_histogram(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Ages in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ggplot(survey_data, aes(x=factor(income_family,level=level_order)))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Family's incomes in Survey")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ggplot(census_data.4, aes(x=factor(income_family,level=level_order)))+
geom_bar(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Family's incomes in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ncol=2, nrow=4)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#library(openintro)
library(tidyverse)
library(broom)
library(ggpubr)
library(lme4)
library(survey)
library(DiagrammeR)
library(webshot)
# Here you can load in the census data
census_data <- read_csv("gss_clean.csv")
# Here you can load in the survey data
survey_data <- read_csv("ces2019_clean.csv")
#filtering out the required columns
census_data.1 <- select(census_data, 2,12,16,17,19,28,47)
# adding the place of birth to our data set
census_data.2 <- census_data.1 %>% mutate(place_birth = coalesce(place_birth_macro_region, place_birth_province ))
#[https://stackoverflow.com/questions/14563531/combine-column-to-remove-nas]
# removing the columns for place of birth
census_data.3 <- select(census_data.2, -3,-4)
# removing the NA
census_data.4 <- na.omit(census_data.3)
## EDUCATION
# combining the "Trade certificate or diploma" +"College, CEGEP or other non-university certificate or di..."
# into "College, CEGEP, trade certificate or other non-university certificate or di..."
# reason: to sync with the survey data category
census_data.4$education <- replace(census_data.4$education, census_data.4$education ==
"College, CEGEP or other non-university certificate or di...",
"College, CEGEP, trade certificate or other non-university certificate or di...")
census_data.4$education <- replace(census_data.4$education, census_data.4$education ==
"Trade certificate or diploma", "College, CEGEP, trade certificate or other non-university certificate or di...")
## Age
# We drop the decimal point to stay consistent with the survey
census_data.4$age <- floor(census_data.4$age)
##SHOW THE NUMBER FOR EACH province##
mytable.1 <- table(survey_data$sex)
lbls.1 <- paste(names(mytable.1), "\n", mytable.1, sep="")
mytable.2 <- table(census_data$sex)
lbls.2 <- paste(names(mytable.2), "\n", mytable.2, sep="")
level_order <- c('Less than $25,000', '$25,000 to $49,999', '$50,000 to $74,999','$75,000 to $99,999','$100,000 to $124,999','$125,000 and more')
ggarrange(
ggplot(survey_data, aes(x=sex ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Survey") + theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")) ,
ggplot(census_data.4, aes(x=sex))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ggplot(survey_data, aes(x=province ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Province in Survey")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold"),axis.text.x = element_text(angle = 90)),
ggplot(census_data.4, aes(x=province))+
geom_bar(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Province in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold"),axis.text.x = element_text(angle = 90)),
ggplot(survey_data, aes(x=age ))+
geom_histogram(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Ages in Survey")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ggplot(census_data.4, aes(x=age))+
geom_histogram(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Ages in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ggplot(survey_data, aes(x=factor(income_family,level=level_order)))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) + xlab("income") +
ggtitle("Spread of Family's incomes in Survey")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ggplot(census_data.4, aes(x=factor(income_family,level=level_order)))+ xlab("income") +
geom_bar(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Family's incomes in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),
ncol=2, nrow=4)
# get the frequency for each variable using
#table(census_data.4$province)
table(survey_data.2$income_family)
level_order <- c('Less than $25,000', '$25,000 to $49,999', '$50,000 to $74,999','$75,000 to $99,999','$100,000 to $ 124,999','$125,000 and more')
ggarrange(
ggplot(survey_data, aes(x=sex ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Survey") + theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")) ,
ggplot(census_data.4, aes(x=sex))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),ncol=2, nrow=1))
level_order <- c('Less than $25,000', '$25,000 to $49,999', '$50,000 to $74,999','$75,000 to $99,999','$100,000 to $ 124,999','$125,000 and more')
ggarrange(
ggplot(survey_data, aes(x=sex ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Survey") + theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")) ,
ggplot(census_data.4, aes(x=sex))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),ncol=2, nrow=1)
level_order <- c('Less than $25,000', '$25,000 to $49,999', '$50,000 to $74,999','$75,000 to $99,999','$100,000 to $ 124,999','$125,000 and more')
ggarrange(
ggplot(survey_data, aes(x=sex ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Survey") + theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")) ,
ggplot(census_data.4, aes(x=sex))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),ncol=2, nrow=1)
level_order <- c('Less than $25,000', '$25,000 to $49,999', '$50,000 to $74,999','$75,000 to $99,999','$100,000 to $ 124,999','$125,000 and more')
ggarrange(
ggplot(survey_data, aes(x=sex ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Survey") + theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")) ,
ggplot(census_data.4, aes(x=sex))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=25),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),ncol=2, nrow=1)
level_order <- c('Less than $25,000', '$25,000 to $49,999', '$50,000 to $74,999','$75,000 to $99,999','$100,000 to $ 124,999','$125,000 and more')
ggarrange(
ggplot(survey_data, aes(x=sex ))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Survey") + theme(axis.text=element_text(size=20),
axis.title=element_text(size=40),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")) ,
ggplot(census_data.4, aes(x=sex))+
geom_bar(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Sex in Census")+ theme(axis.text=element_text(size=20),
axis.title=element_text(size=40),plot.title= element_text(size = 30, hjust = 0.5,
face = "bold")),ncol=2, nrow=1)
DiagrammeR::grViz("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle, fontsize = 20]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
tab7 [label = '@@7']
tab8 [label = '@@8']
tab9 [label = '@@9']
# edge definitions with the node IDs
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7 -> tab8 -> tab9;
}
[1]: 'Divide both the data frames into provences'
[2]: 'Find popular parties for each province'
[3]: 'Group the Survey data into people voting in favour/not in favour of the selected party'
[4]: 'Make the model based on the new survey data'
[5]: 'Group the census province data into bins'
[6]: 'Using the model make the predicitons on the data from previous step'
[7]: 'Get the estimated percentage for the party in the province'
[8]: 'Party with the highest percentage gets all the seats for that region'
[9]: 'Part with the most seats is the most popular party and is expected to win'
")
DiagrammeR::grViz("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle, fontsize = 5]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
tab7 [label = '@@7']
tab8 [label = '@@8']
tab9 [label = '@@9']
# edge definitions with the node IDs
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7 -> tab8 -> tab9;
}
[1]: 'Divide both the data frames into provences'
[2]: 'Find popular parties for each province'
[3]: 'Group the Survey data into people voting in favour/not in favour of the selected party'
[4]: 'Make the model based on the new survey data'
[5]: 'Group the census province data into bins'
[6]: 'Using the model make the predicitons on the data from previous step'
[7]: 'Get the estimated percentage for the party in the province'
[8]: 'Party with the highest percentage gets all the seats for that region'
[9]: 'Part with the most seats is the most popular party and is expected to win'
")
DiagrammeR::grViz("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle, fontsize = 25]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
tab7 [label = '@@7']
tab8 [label = '@@8']
tab9 [label = '@@9']
# edge definitions with the node IDs
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7 -> tab8 -> tab9;
}
[1]: 'Divide both the data frames into provences'
[2]: 'Find popular parties for each province'
[3]: 'Group the Survey data into people voting in favour/not in favour of the selected party'
[4]: 'Make the model based on the new survey data'
[5]: 'Group the census province data into bins'
[6]: 'Using the model make the predicitons on the data from previous step'
[7]: 'Get the estimated percentage for the party in the province'
[8]: 'Party with the highest percentage gets all the seats for that region'
[9]: 'Part with the most seats is the most popular party and is expected to win'
")
DiagrammeR::grViz("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle, fontsize = 30]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
tab7 [label = '@@7']
tab8 [label = '@@8']
tab9 [label = '@@9']
# edge definitions with the node IDs
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7 -> tab8 -> tab9;
}
[1]: 'Divide both the data frames into provences'
[2]: 'Find popular parties for each province'
[3]: 'Group the Survey data into people voting in favour/not in favour of the selected party'
[4]: 'Make the model based on the new survey data'
[5]: 'Group the census province data into bins'
[6]: 'Using the model make the predicitons on the data from previous step'
[7]: 'Get the estimated percentage for the party in the province'
[8]: 'Party with the highest percentage gets all the seats for that region'
[9]: 'Part with the most seats is the most popular party and is expected to win'
")
DiagrammeR::grViz("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle, fontsize = 69]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
tab7 [label = '@@7']
tab8 [label = '@@8']
tab9 [label = '@@9']
# edge definitions with the node IDs
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7 -> tab8 -> tab9;
}
[1]: 'Divide both the data frames into provences'
[2]: 'Find popular parties for each province'
[3]: 'Group the Survey data into people voting in favour/not in favour of the selected party'
[4]: 'Make the model based on the new survey data'
[5]: 'Group the census province data into bins'
[6]: 'Using the model make the predicitons on the data from previous step'
[7]: 'Get the estimated percentage for the party in the province'
[8]: 'Party with the highest percentage gets all the seats for that region'
[9]: 'Part with the most seats is the most popular party and is expected to win'
")
DiagrammeR::grViz("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle, fontsize = 40]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
tab7 [label = '@@7']
tab8 [label = '@@8']
tab9 [label = '@@9']
# edge definitions with the node IDs
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7 -> tab8 -> tab9;
}
[1]: 'Divide both the data frames into provences'
[2]: 'Find popular parties for each province'
[3]: 'Group the Survey data into people voting in favour/not in favour of the selected party'
[4]: 'Make the model based on the new survey data'
[5]: 'Group the census province data into bins'
[6]: 'Using the model make the predicitons on the data from previous step'
[7]: 'Get the estimated percentage for the party in the province'
[8]: 'Party with the highest percentage gets all the seats for that region'
[9]: 'Part with the most seats is the most popular party and is expected to win'
")
