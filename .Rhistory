# running multilevel logistic regression model
glm_NDP_model.2<-glm(NDP_pref ~ sex + feelings_life + education + religion_participation + age + income_family + (1|province), data=NDP_predic, family="binomial")
# running multilevel logistic regression model
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life + education + religion_participation + age + income_family + (1|province), data=NDP_predic, family="binomial")
library(lme4)
# running multilevel logistic regression model
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life + education + religion_participation + age + income_family + (1|province), data=NDP_predic, family="binomial")
# running multilevel logistic regression model
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life + education + religion_participation + age + income_family + (1|province), data=NDP_predic, family=binomial)
# running multilevel logistic regression model
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life + education + (1|province), data=NDP_predic, family=binomial)
# running multilevel logistic regression model
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life + education + (1|province), data=NDP_predic, family=binomial)
summary(glm_NDP_model.1)
summary(glm_NDP_model.2)
# running multilevel logistic regression model
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life +religion_participation+ education + (1|province), data=NDP_predic, family=binomial)
# running logistic regression model         ----High p-values---
glm_NDP_model.1<-glm(NDP_pref ~ sex + feelings_life + education + religion_participation + income_family + age + income_family + province, data=NDP_predic, family="binomial")
# running multilevel logistic regression model
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life +religion_participation+ education +  age + (1|province), data=NDP_predic, family=binomial)
summary(glm_NDP_model.2)
# running multilevel logistic regression model                ------ +  age causing error, p-values
glm_NDP_model.2<-glmer(NDP_pref ~ sex + age  + (1|province), data=NDP_predic, family=binomial)
cor(glm_NDP_model.2)
cor(summary(glm_NDP_model.2))
library(brms)
brm_NDP_model.1 <- brm(NDP_pref ~ sex + feelings_life + education + religion_participation + income_family + age + income_family + province, data=NDP_predic, family=bernoulli())
summary(brm_NDP_model.1)
tidy(brm_NDP_model.1) -> brm_NDP_res.1
summary(brm_NDP_model.1)
tidy(brm_NDP_model.1) -> brm_NDP_res.1
summary(brm_NDP_model.1)
View(NDP_predic)
brm_NDP_model.2 <- brm(NDP_pref ~ sex + feelings_life + education + religion_participation + income_family + age + income_family + (1|province), data=NDP_predic, family=bernoulli())
summary(brm_NDP_model.2)
summary(brm_NDP_model.2)
view(NDP_Res)
view(glm_NDP_res.1)
view(glm_NDP_res.2)
tidy(glm_NDP_model.2) -> glm_NDP_res.2
# religion_participation + age + income_family
summary(glm_NDP_model.2)
# running multilevel logistic regression model                ------!!!! +  age !!!!!causing error, p-values -----
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life +religion_participation+ education  + (1|province), data=NDP_predic, family=binomial)
# religion_participation + age + income_family
summary(glm_NDP_model.2)
tidy(glm_NDP_model.2) -> glm_NDP_res.2
n = length(survey_data$political_pref)
N = 37.59 * 10^6
## Using the Survey Library
fpc.srs = rep(N, n)
## running estimated logistic regression model
design.NDP <- svydesign(id=~1, data=NDP_predic, fpc=fpc.srs)
# SVglm sampling regression with as.factor()
model.NDP <- svyglm( NDP_pref ~ as.factor(sex) + as.factor(feelings_life) + as.factor(education) + as.factor(religion_participation) + age + as.factor(income_family)+ as.factor(province), design.NDP, family="binomial")
#results
summary(model.NDP)
tidy(model.NDP) -> NDP_Res
view(NDP_Res)
# svglm WO as.factor                    ----The right way using
model.NDP.1 <- svyglm( NDP_pref ~ sex + feelings_life + education + religion_participation + age + income_family + province, design.NDP, family="binomial")
#results
summary(model.NDP.1)
tidy(model.NDP.1) -> NDP_Res.1
view(NDP_Res.1)
# running logistic regression model         ----High p-values---
glm_NDP_model.1<-glm(NDP_pref ~ sex + feelings_life + education + religion_participation + income_family + age + income_family + province, data=NDP_predic, family="binomial")
summary(glm_NDP_model.1)
tidy(glm_NDP_model.1) -> glm_NDP_res.1
view(glm_NDP_res.1)
# running multilevel logistic regression model                ------!!!! +  age !!!!!causing error, p-values -----
glm_NDP_model.2<-glmer(NDP_pref ~ sex + feelings_life +religion_participation+ education  + (1|province), data=NDP_predic, family=binomial)
# religion_participation + age + income_family
summary(glm_NDP_model.2)
#tidy(glm_NDP_model.2) -> glm_NDP_res.2
#view(glm_NDP_res.2)
##Baysian how to know which model is much better?
# running a baysian logestic regression model
brm_NDP_model.1 <- brm(NDP_pref ~ sex + feelings_life + education + religion_participation + income_family + age + income_family + province, data=NDP_predic, family=bernoulli())
summary(brm_NDP_model.1)
# running a baysian logestic multilevel regression model
brm_NDP_model.2 <- brm(NDP_pref ~ sex + feelings_life + education + religion_participation + income_family + age + income_family + (1|province), data=NDP_predic, family=bernoulli())
summary(brm_NDP_model.2)
### to DO's
## need the population size for each provience
## Do post strat based on Provience
## estimate the Y_hat for each party using log regression, repeat above for each party and see the leader
glm_NDP_model.22<-glmer(NDP_pref ~ sex + feelings_life +religion_participation+ education +  age  + (1|province), data=NDP_predic, family=binomial)
# Spread of ages
ggarrange(
ggplot(survey_data, aes(x=age ))+
geom_histogram(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Ages in Survey"),
ggplot(census_data.8, aes(x=age))+
geom_histogram(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Ages in Census"),
ncol=2, nrow=1)
#filtering out the required columns
census_data.1 <- select(census_data, 2,5,11,12,16,17,19,21,23,24,27,28,30,38,44,47,49, 64)
#head(census_data.1)
# adding the place of birth to our data set
census_data.2 <- census_data.1 %>% mutate(place_birth = coalesce(place_birth_macro_region, place_birth_province ))
#[https://stackoverflow.com/questions/14563531/combine-column-to-remove-nas]
# removing the columns for place of birth
census_data.3 <- select(census_data.2, -5,-6)
#view(census_data.3)
# remove the NA
census_data.4 <- na.omit(census_data.3)
# remove don't know from the selected columns
census_data.5 <- census_data.4[!grepl("Don't know", census_data.4$aboriginal), ]
census_data.5 <- census_data.5[!grepl("Don't know", census_data.5$vis_minority), ]
census_data.5 <- census_data.5[!grepl("Don't know", census_data.5$average_hours_worked), ]
census_data.5 <- census_data.5[!grepl("Don't know", census_data.5$regilion_importance), ]
census_data.5 <- census_data.5[!grepl("Don't know", census_data.5$average_hours_worked), ]
census_data.5 <- census_data.5[!grepl("Don't know", census_data.5$religion_participation), ]
## EDUCATION
# combining the "Trade certificate or diploma" +"College, CEGEP or other non-university certificate or di..."
# into "College, CEGEP, trade certificate or other non-university certificate or di..."
# reason: to sync with the survey data categoery
census_data.5$education <- replace(census_data.5$education, census_data.5$education ==
"College, CEGEP or other non-university certificate or di...",
"College, CEGEP, trade certificate or other non-university certificate or di...")
census_data.5$education <- replace(census_data.5$education, census_data.5$education ==
"Trade certificate or diploma", "College, CEGEP, trade certificate or other non-university certificate or di...")
## Religion
# combining "At least 3 times a year" and "Once or twice a year" into "At least once a year"
census_data.5$religion_participation <- replace(census_data.5$religion_participation, census_data.5$religion_participation =="Once or twice a year", "At least once a year")
census_data.5$religion_participation <- replace(census_data.5$religion_participation, census_data.5$religion_participation =="At least 3 times a year", "At least once a year")
## Feelings life
## make a range for the values to fit with the other frame of 4 vlaues for feeling life
census_data.6 <- census_data.5 %>%
# making a dummy col for now
mutate(feelings_life_d = case_when(census_data.5$feelings_life < 2 ~ "Not satisfied at all",       # (0,1) not satisfied
census_data.5$feelings_life <  6 ~ "Not very satisfied",        # [1,5] not very satisfied
census_data.5$feelings_life <  10 ~ "Fairly satisfied",          # [6,9] failry satisfied
census_data.5$feelings_life ==  10 ~ "Very satisfied"           # 10 satisfied
))
## now delete the original feeling col then rename the dummy col to the feeling col
census_data.7 <- select(census_data.6, -3)
names(census_data.7)[17] <- "feelings_life"
## Age
# we drop the decimal point to stay consistent with the survey
census_data.7$age <- floor(census_data.7$age)
#https://stackoverflow.com/questions/40399255/remove-decimals-from-a-column-in-a-data-frame
# Spread of ages
ggarrange(
ggplot(survey_data, aes(x=age ))+
geom_histogram(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Ages in Survey"),
ggplot(census_data.8, aes(x=age))+
geom_histogram(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Ages in Census"),
ncol=2, nrow=1)
census_data.8 <- census_data.7 %>%
select(sex, province, feelings_life, education, religion_participation, age, income_family)
# Spread of ages
ggarrange(
ggplot(survey_data, aes(x=age ))+
geom_histogram(color="darkblue", fill="lightblue", bins = 40) +
ggtitle("Spread of Ages in Survey"),
ggplot(census_data.8, aes(x=age))+
geom_histogram(color="darkblue", fill="lightblue", bins = 50) +
ggtitle("Spread of Ages in Census"),
ncol=2, nrow=1)
table(census_data$age)
table(survey_data$age)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#library(openintro)
library(tidyverse)
library(broom)
library(ggpubr)
library(lme4)
library(brms)
library(survey)
# Here we are just loading the data files
census_data <- read_csv("gss_clean.csv")
# Here you can load in the survey data
survey_data <- read_csv("ces2019_clean.csv")
table(Green_predic$age)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#library(openintro)
library(tidyverse)
library(broom)
library(ggpubr)
library(lme4)
library(brms)
library(survey)
# Here we are just loading the data files
census_data <- read_csv("gss_clean.csv")
# Here you can load in the survey data
survey_data <- read_csv("ces2019_clean.csv")
#filtering out the required columns
census_data.1 <- select(census_data, 2,12,16,17,19,28,47)
#head(census_data.1)
# adding the place of birth to our data set
census_data.2 <- census_data.1 %>% mutate(place_birth = coalesce(place_birth_macro_region, place_birth_province ))
#[https://stackoverflow.com/questions/14563531/combine-column-to-remove-nas]
# removing the columns for place of birth
census_data.3 <- select(census_data.2, -3,-4)
view(census_data.3)
# remove the NA
census_data.4 <- na.omit(census_data.3)
## EDUCATION
# combining the "Trade certificate or diploma" +"College, CEGEP or other non-university certificate or di..."
# into "College, CEGEP, trade certificate or other non-university certificate or di..."
# reason: to sync with the survey data categoery
census_data.4$education <- replace(census_data.4$education, census_data.4$education ==
"College, CEGEP or other non-university certificate or di...",
"College, CEGEP, trade certificate or other non-university certificate or di...")
census_data.4$education <- replace(census_data.4$education, census_data.4$education ==
"Trade certificate or diploma", "College, CEGEP, trade certificate or other non-university certificate or di...")
## Age
# we drop the decimal point to stay consistent with the survey
census_data.4$age <- floor(census_data.4$age)
#https://stackoverflow.com/questions/40399255/remove-decimals-from-a-column-in-a-data-frame
View(census_data.4)
#filtering out the required columns
census_data.1 <- select(census_data, 2,12,16,17,19,28,47)
# Here we are just loading the data files
census_data <- read_csv("gss_clean.csv")
# Here you can load in the survey data
survey_data <- read_csv("ces2019_clean.csv")
#filtering out the required columns
census_data.1 <- select(census_data, 2,12,16,17,19,28,47)
#head(census_data.1)
# adding the place of birth to our data set
census_data.2 <- census_data.1 %>% mutate(place_birth = coalesce(place_birth_macro_region, place_birth_province ))
#[https://stackoverflow.com/questions/14563531/combine-column-to-remove-nas]
# removing the columns for place of birth
census_data.3 <- select(census_data.2, -3,-4)
view(census_data.3)
# remove the NA
census_data.4 <- na.omit(census_data.3)
## make the according data sets according to the Support
NDP_predic <- survey_data %>%
mutate(NDP_pref = case_when( survey_data$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
## Bloc Québécois (BQ, PQ, Bloc, Parti Québécois)
Bloc_predic <- survey_data %>%
mutate(Bloc_pref = case_when(survey_data$political_pref == "Bloc Québécois (BQ, PQ, Bloc, Parti Québécois)" ~ 1,
survey_data$political_pref != "Bloc Québécois (BQ, PQ, Bloc, Parti Québécois)" ~ 0))
## Green Party (Greens)
Green_predic <- survey_data %>%
mutate(Green_pref = case_when(survey_data$political_pref == "Green Party (Greens)" ~ 1,
survey_data$political_pref != "Green Party (Greens)"  ~ 0))
## Conservatives (Tory, PCs, Conservative Party of Canada)
Conservative_predic <- survey_data %>%
mutate(Conservative_pref = case_when(survey_data$political_pref == "Conservatives (Tory, PCs, Conservative Party of Canada)" ~ 1,
survey_data$political_pref != "Conservatives (Tory, PCs, Conservative Party of Canada)"  ~ 0))
## Liberal (Grits)
Liberal_predic <- survey_data %>%
mutate(Liberal_pref = case_when(survey_data$political_pref == "Liberal (Grits)" ~ 1,
survey_data$political_pref != "Liberal (Grits)"  ~ 0))
## People's Party
Liberal_predic <- survey_data %>%
mutate(People_pref = case_when(survey_data$political_pref == "People's Party" ~ 1,
survey_data$political_pref != "People's Party"  ~ 0))
## Will spoil ballet
Spoil_pred <- survey_data %>%
mutate(People_pref = case_when(survey_data$political_pref == "Will spoil ballet" ~ 1,
survey_data$political_pref != "Will spoil ballet"  ~ 0))
## Other
Other_pred <- survey_data %>%
mutate(Other_pref = case_when(survey_data$political_pref == "Other" ~ 1,
survey_data$political_pref != "Other"  ~ 0))
census_data.4$age <- floor(census_data.4$age)
View(census_data.4)
glm_NDP_model.1<-glm(NDP_pref ~ sex + education + age + income_family + province, data=NDP_predic, family="binomial")
summary(glm_NDP_model.1)
tidy(glm_NDP_model.1) -> glm_NDP_res.1
view(glm_NDP_res.1)
glm_NDP_model.1<-glm(NDP_pref ~ sex + education + age + income_family + province, data=NDP_predic, family="binomial")
summary(glm_NDP_model.1)
tidy(glm_NDP_model.1) -> glm_NDP_res.1
view(glm_NDP_res.1)
# running multilevel logistic regression model                ------!!!! +  age !!!!!causing error, p-values -----
glm_NDP_model.2<-glmer(NDP_pref ~ sex + education +  age + (1|province), data=NDP_predic, family=binomial)
# religion_participation + age + income_family
summary(glm_NDP_model.2)
View(census_data.4)
glm_NDP_model.2<-glmer(NDP_pref ~ sex + education +  age + (1|province), data=NDP_predic, family=binomial)
# religion_participation + age + income_family
summary(glm_NDP_model.2)
estimate_sum = 0.203166 + -0.540797*x1 + -0.082159*x2 + -0.168995*x3 + -1.780165*x4 + 0.356030*x5 + 0.228831*x6 + -0.036131*x7
return(estimate_sum)
sum <- function(x1,x2,x3,x4,x5,x6,x7){
estimate_sum = 0.203166 + -0.540797*x1 + -0.082159*x2 + -0.168995*x3 + -1.780165*x4 + 0.356030*x5 + 0.228831*x6 + -0.036131*x7
return(estimate_sum)
}
predict(glm_NDP_model.2, census_data.4)
table(census_data.4)
table(census_data.4$education)
table(survey_data$education)
census_data.4$education <- replace(census_data.4$education, census_data.4$education ==
"College, CEGEP or other non-university certificate or di...",
"College, CEGEP, trade certificate or other non-university certificate or di...")
census_data.4$education <- replace(census_data.4$education, census_data.4$education ==
"Trade certificate or diploma", "College, CEGEP, trade certificate or other non-university certificate or di...")
census_data.4$age <- floor(census_data.4$age)
table(census_data.4$education)
predict(glm_NDP_model.2, census_data.4)
X <- predict(glm_NDP_model.2, census_data.4)
view(X)
e
exp(1)
est_p <- function(sum){
return(exp(sum)/1+(exp(sum)))
}
est_p(-1.70680250)
est_p(	-4.7122669)
# make them in groups by province
alberta <- census_data.5 %>% group_by(province = "Alberta")
# make them in groups by province
alberta <- census_data.4 %>% group_by(province = "Alberta")
X <- predict(glm_NDP_model.2, alberta)
alberta$predictionXNDp <- X
alberta$predictionXNDp <- tibble(X)
view(alberta$predictionXNDp)
view(alberta)
table(alberta)
View(census_data.4)
View(NDP_predic)
census_data.5 <- census_data.4 %>%
mutate(age_group = case_when(census_data.4$age <18 ~ "Under 18",
census_data.4$age <25 ~ "18 to 24 years",
census_data.4$age <45 ~ "25 to 44 years",
census_data.4$age <65 ~ "45 to 64 years",
census_data.4$age >65 ~ "Over 65",
))
View(census_data.5)
table(alberta$predictionXNDp)
table(census_data.5$age)
# age group for survey data
survey_data.1 <- survey_data %>%
mutate(age_group = case_when(survey_data$age <18 ~ "Under 18",
survey_data$age <25 ~ "18 to 24 years",
survey_data$age <45 ~ "25 to 44 years",
survey_data$age <65 ~ "45 to 64 years",
survey_data$age >65 ~ "Over 65",
))
View(survey_data.1)
# age group for census data
census_data.5 <- census_data.4 %>%
mutate(age_group = case_when(census_data.4$age <18 ~ "Under 18",
census_data.4$age <25 ~ "18 to 24 years",
census_data.4$age <45 ~ "25 to 44 years",
census_data.4$age <65 ~ "45 to 64 years",
census_data.4$age >64 ~ "Over 65",
))
# age group for survey data
survey_data.1 <- survey_data %>%
mutate(age_group = case_when(survey_data$age <18 ~ "Under 18",
survey_data$age <25 ~ "18 to 24 years",
survey_data$age <45 ~ "25 to 44 years",
survey_data$age <65 ~ "45 to 64 years",
survey_data$age >64 ~ "Over 65",
))
table(census_data.5$age)
table(census_data.5$age_group)
table(survey_data.1$age_group)
NDP_predic <- survey_data.1 %>%
mutate(NDP_pref = case_when( survey_data.1$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.1$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
# catoger the age groups for model
NDP_predic.1 <- survey_data.1 %>%
mutate(NDP_pref = case_when( survey_data.1$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.1$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
# make the modle based on the new data catogeries
glm_NDP_model.2<-glmer(NDP_pref ~ sex + education +  income_family +  age_group + (1|province), data=NDP_predic.1, family=binomial)
summary(glm_NDP_model.2)
# assign bins and get the counts
survey_data.1 <- survey_data.1 %>%
group_by(age_group)
survey_data.1 <- survey_data %>%
mutate(age_group = case_when(survey_data$age <18 ~ "Under 18",
survey_data$age <25 ~ "18 to 24 years",
survey_data$age <45 ~ "25 to 44 years",
survey_data$age <65 ~ "45 to 64 years",
survey_data$age >64 ~ "Over 65",
))
# assign bins and get the counts
survey_data.2 <- survey_data.1 %>%
group_by(age_group)
View(survey_data.2)
View(survey_data.1)
View(survey_data)
survey_data.2 <- survey_data %>%
mutate(age_group = case_when(survey_data$age <18 ~ "Under 18",
survey_data$age <25 ~ "18 to 24 years",
survey_data$age <45 ~ "25 to 44 years",
survey_data$age <65 ~ "45 to 64 years",
survey_data$age >64 ~ "Over 65",
))
View(survey_data.2)
survey_data.1 <- survey_data %>%
mutate(age_group = case_when(survey_data$age <18 ~ "Under 18",
survey_data$age <25 ~ "18 to 24 years",
survey_data$age <45 ~ "25 to 44 years",
survey_data$age <65 ~ "45 to 64 years",
survey_data$age >64 ~ "Over 65",
))
NDP_predic.1 <- survey_data.1 %>%
mutate(NDP_pref = case_when( survey_data.1$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.1$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
# catoger the age groups for model
NDP_predic.1 <- survey_data.1 %>%
mutate(NDP_pref = case_when( survey_data.1$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.1$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
View(NDP_predic.1)
glm_NDP_model.2<-glmer(NDP_pref ~ sex + education +  income_family +  age_group + (1|province), data=NDP_predic.1, family=binomial)
summary(glm_NDP_model.2)
# assign bins and get the counts
census_data.2 <- survey_data.1 %>%
group_by(ages= age_group)
View(census_data.2)
table(census_data.2$age_group)
summary(census_data.5)
# assign bins and get the counts
census_data.22 <- survey_data.1 %>%
count(sex, province, education,  income_family, place_birth, age_group)
# assign bins and get the counts
census_data.22 <- census_data.5 %>%
count(sex, province, education,  income_family, place_birth, age_group)
View(census_data.5)
View(census_data.22)
View(NDP_predic.1)
View(census_data.22)
View(census_data.5)
census_data.6 <- select(census_data.5, -6)
View(survey_data.1)
#filtering out the required columns
census_data.1 <- select(census_data, 2,12,16,17,19,28,47)
#head(census_data.1)
# adding the place of birth to our data set
census_data.2 <- census_data.1 %>% mutate(place_birth = coalesce(place_birth_macro_region, place_birth_province ))
#[https://stackoverflow.com/questions/14563531/combine-column-to-remove-nas]
# removing the columns for place of birth
census_data.3 <- select(census_data.2, -3,-4)
view(census_data.3)
# remove the NA
census_data.4 <- na.omit(census_data.3)
## EDUCATION
# combining the "Trade certificate or diploma" +"College, CEGEP or other non-university certificate or di..."
# into "College, CEGEP, trade certificate or other non-university certificate or di..."
# reason: to sync with the survey data categoery
census_data.4$education <- replace(census_data.4$education, census_data.4$education ==
"College, CEGEP or other non-university certificate or di...",
"College, CEGEP, trade certificate or other non-university certificate or di...")
census_data.4$education <- replace(census_data.4$education, census_data.4$education ==
"Trade certificate or diploma", "College, CEGEP, trade certificate or other non-university certificate or di...")
## Age
# we drop the decimal point to stay consistent with the survey
census_data.4$age <- floor(census_data.4$age)
#https://stackoverflow.com/questions/40399255/remove-decimals-from-a-column-in-a-data-frame
View(census_data.6)
View(survey_data.1)
View(survey_data)
# survey data grouping based on age
survey_data.1 <- survey_data %>%
mutate(age_group = case_when(survey_data$age <18 ~ "Under 18",
survey_data$age <25 ~ "18 to 24 years",
survey_data$age <45 ~ "25 to 44 years",
survey_data$age <65 ~ "45 to 64 years",
survey_data$age >64 ~ "Over 65",
))
View(survey_data.1)
summary(survey_data.1)
summary(census_data.6)
survey_data.2 <- select(survey_data.1, -3, -6)
summary(census_data.6)
summary(survey_data.1)
View(survey_data.1)
View(census_data.5)
View(survey_data.2)
census_data.6 <- select(census_data.5, -6, -1)
View(census_data.6)
survey_data.1 <- survey_data %>%
mutate(age_group = case_when(survey_data$age <18 ~ "Under 18",
survey_data$age <25 ~ "18 to 24 years",
survey_data$age <45 ~ "25 to 44 years",
survey_data$age <65 ~ "45 to 64 years",
survey_data$age >64 ~ "Over 65",
))
survey_data.2 <- select(survey_data.1, -3, -6)
View(survey_data.2)
survey_data.2 <- select(survey_data.1, -3, -6, -5)
View(survey_data.2)
View(survey_data.1)
survey_data.2 <- select(survey_data.1, -3, -6)
View(survey_data.2)
survey_data.2 <- select(survey_data.1, -3, -6)
survey_data.2 <- select(survey_data.1, -3, -6)
survey_data.2 <- select(survey_data.2, -5)
View(survey_data.2)
summary(survey_data.2)
summary(census_data.6)
NDP_predic.1 <- survey_data.2 %>%
mutate(NDP_pref = case_when( survey_data.2$political_pref == "NDP (New Democratic Party, New Democrats, NDPers)" ~ 1,
survey_data.2$political_pref != "NDP (New Democratic Party, New Democrats, NDPers)" ~ 0))
summary(NDP_predic.1)
glm_NDP_model.2<-glmer(NDP_pref ~ sex, (1|province), education, political_pref, income_family,age_group , data=NDP_predic.1, family=binomial)
glm_NDP_model.2<-glmer(NDP_pref ~ sex+ (1|province)+ education+ political_pref+ income_family+age_group , data=NDP_predic.1, family=binomial)
summary(glm_NDP_model.2)
glm_NDP_model.2<-glmer(NDP_pref ~ sex+ (1|province)+ education+ income_family+age_group , data=NDP_predic.1, family=binomial)
summary(glm_NDP_model.2)
census_data.7 <- census_data.6 %>%
count(sex, province, education,  income_family, place_birth, age_group)
# assign bins and get the counts
census_data.7 <- census_data.6 %>%
count(sex, province, education,  income_family, age_group)
View(census_data.7)
